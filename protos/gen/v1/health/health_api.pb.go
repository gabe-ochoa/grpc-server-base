// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/health/health_api.proto

package healthv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ServingStatus tells the clients what state the server is in and if requests should be sent or not.
type HealthResponse_ServingStatus int32

const (
	HealthResponse_UNKNOWN     HealthResponse_ServingStatus = 0
	HealthResponse_SERVING     HealthResponse_ServingStatus = 1
	HealthResponse_NOT_SERVING HealthResponse_ServingStatus = 2
)

var HealthResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}

var HealthResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthResponse_ServingStatus) String() string {
	return proto.EnumName(HealthResponse_ServingStatus_name, int32(x))
}

func (HealthResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5165dd1f464e6b19, []int{1, 0}
}

type HealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5165dd1f464e6b19, []int{0}
}

func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthRequest.Unmarshal(m, b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
}
func (m *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(m, src)
}
func (m *HealthRequest) XXX_Size() int {
	return xxx_messageInfo_HealthRequest.Size(m)
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

type HealthResponse struct {
	Status               HealthResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=health.v1.HealthResponse_ServingStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5165dd1f464e6b19, []int{1}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetStatus() HealthResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthResponse_UNKNOWN
}

func init() {
	proto.RegisterEnum("health.v1.HealthResponse_ServingStatus", HealthResponse_ServingStatus_name, HealthResponse_ServingStatus_value)
	proto.RegisterType((*HealthRequest)(nil), "health.v1.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "health.v1.HealthResponse")
}

func init() { proto.RegisterFile("v1/health/health_api.proto", fileDescriptor_5165dd1f464e6b19) }

var fileDescriptor_5165dd1f464e6b19 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x33, 0xd4, 0xcf,
	0x48, 0x4d, 0xcc, 0x29, 0xc9, 0x80, 0x52, 0xf1, 0x89, 0x05, 0x99, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x42, 0x9c, 0x10, 0x11, 0xbd, 0x32, 0x43, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54,
	0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62,
	0x88, 0x42, 0x25, 0x7e, 0x2e, 0x5e, 0x0f, 0xb0, 0xd2, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0xa5, 0x5e, 0x46, 0x2e, 0x3e, 0x98, 0x48, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x3d, 0x17,
	0x5b, 0x71, 0x49, 0x62, 0x49, 0x69, 0xb1, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xba, 0x1e,
	0xdc, 0x74, 0x3d, 0x54, 0xa5, 0x7a, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0x79, 0xe9, 0xc1, 0x60, 0xe5,
	0x41, 0x50, 0x6d, 0x4a, 0x56, 0x5c, 0xbc, 0x28, 0x12, 0x42, 0xdc, 0x5c, 0xec, 0xa1, 0x7e, 0xde,
	0x7e, 0xfe, 0xe1, 0x7e, 0x02, 0x0c, 0x20, 0x4e, 0xb0, 0x6b, 0x50, 0x98, 0xa7, 0x9f, 0xbb, 0x00,
	0xa3, 0x10, 0x3f, 0x17, 0xb7, 0x9f, 0x7f, 0x48, 0x3c, 0x4c, 0x80, 0xc9, 0x28, 0x8e, 0x8b, 0x13,
	0x62, 0x87, 0x63, 0x80, 0xa7, 0x50, 0x20, 0x17, 0x1b, 0x84, 0x23, 0x24, 0x81, 0xc5, 0x0d, 0x60,
	0x0f, 0x48, 0x49, 0xe2, 0x74, 0x9d, 0x92, 0x50, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0x78, 0x84, 0xb8,
	0xf4, 0xe1, 0x41, 0xe7, 0xc4, 0x15, 0xc5, 0x01, 0x61, 0x95, 0x19, 0x26, 0xb1, 0x81, 0xc3, 0xc4,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x85, 0xd5, 0x5d, 0x99, 0x5a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthAPIClient is the client API for HealthAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthAPIClient interface {
	// Health checks the health of the server.
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthAPIClient struct {
	cc *grpc.ClientConn
}

func NewHealthAPIClient(cc *grpc.ClientConn) HealthAPIClient {
	return &healthAPIClient{cc}
}

func (c *healthAPIClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/health.v1.HealthAPI/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthAPIServer is the server API for HealthAPI service.
type HealthAPIServer interface {
	// Health checks the health of the server.
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
}

func RegisterHealthAPIServer(s *grpc.Server, srv HealthAPIServer) {
	s.RegisterService(&_HealthAPI_serviceDesc, srv)
}

func _HealthAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health.v1.HealthAPI/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAPIServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "health.v1.HealthAPI",
	HandlerType: (*HealthAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _HealthAPI_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/health/health_api.proto",
}
